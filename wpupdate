#!/bin/bash

#------------------------------------------------------------------------------#
#   Dynamically switch to newest version of Wordpress using SVN                #
#                                                                              #
#                                                                              #
#   @Author: Ammon Shepherd                                                    #
#   @Date:   04.30.14                                                          #
    VERSION="2.0"  
#------------------------------------------------------------------------------#

# End the script if any statement returns a non-true return value
set -e 
# End script if an unset variable is encountered.
set -u 

# Set colors for echo
ESQ="\x1b["
black=$ESQ'30;40m'
red=$ESQ'1;31;40m'
green=$ESQ'32;40m'
yellow=$ESQ'33;40m'
blue=$ESQ'1;34;40m'
magenta=$ESQ'35;40m'
cyan=$ESQ'36;40m'
white=$ESQ'1;37;40m'
reset=$(tput sgr0)

# Constants
RANDOM=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
CURDATE=$(date +%F)
SVNREPORT="svnreport-$CURDATE"
# http://codex.WordPress.org/Installing/Updating_WordPress_with_Subversion
OLDBASE="http://svn.automattic.com/wordpress"
SVNBASE="http://core.svn.wordpress.org"
LATESTWP=$(curl -s http://wordpress.org/download/ | grep "latest stable release of WordPress" | cut -d"(" -f2 | cut -d")" -f1 | cut -d" " -f2)


USAGE='
Usage: wpupdate [OPTIONS]
Upgrade a WordPress install (or a list of installs) to the latest version of WordPress ('$LATESTWP').

Example: wpupdate -f /home/wp-versions 
This would update all of the installs listed in wp-versions to the latest version of WordPress.

Example: wpupdate
Updates the WordPress installation in the current directory (if it is one) to the latest version of WordPress.

Example: wpupdate -h 
Prints out this help message.
'


HELPTEXT='wpupdate '$VERSION' by Ammon Shepherd

'$USAGE'

OPTIONS:
 -b     use the branches, can not be used with -t (tags) option. Used with -u
        [svn update] or -w [svn switch].

 -c     Do not use the wp-config.php file to grab the database user name and
        password. Default is to use the wp-config.php file. Scipt always uses
        wp-config.php to get the database name unless the -d flag is used.

 -d     supply the database name to use. Use only when updating a single
        install

 -f [/path/to/filename]
        path to a file containing a list of paths to WordPress installs, can
        not be used with -i (single install) option. File must consist of full
        paths in the form "/wwwroot/sites/mossiso.com/blog/" each on a separate
        line. A ";" semi-colon designates a commented line. If file exists in
        the directory you are running wpupdate from, then only the filename is
        needed.

 -h     display this help info

 -i     path to  a single WordPress install. Can not be used with -f (versions file)
        option 

 -k     skip backing up the wp-content folder and database

 -m     Set the temp path, /tmp by default.

 -n     run as a normal user, do not use sudo

 -o [/path/to/filename]     
        path to output file containing report of svn update. File will be
        created if it does not exist. The directories must already exist. The
        default is to save it to your home directory. (ex. '$HOME')

 -p     turn off the steps to secure and protect WP. Steps include removing
        the install.php file, adding rules to the htaccess file to protect
        the wp-config.php file, the .svn directories, and the
        wp-content/uploads directory. These steps are done by default.

 -v     outputs version information and exits

 -V [#.#]
        The WordPress version number used for the upgrade/downgrade.

 -r     output the default SVN repo used and exit

 -s [http://svn.url.com]
        svn URL to use for updates (defaults to '$SVNBASE').
        Used with -u [svn update] or -w [svn switch].

 -u     use "svn update", can not be used with -w (switch) option. Required for
        SVN update, default is to use WordPress latest.zip and cp command.

 -w     use "svn switch", can not be used with -u (update) option. Required for
        SVN update, default is to use WordPress latest.zip and cp command.

 -t     use the tags, can not be used with -b (branches) option. Used with -u
        [svn update] or -w [svn switch].

 -x     skip fixing permissions and owners


WHAT IT DOES:
    First the wpupudate program makes a backup copy of the MySQL database and
    the wp-contents/ directory. It places these backups in a temporary
    directory.
    

THINGS TO KNOW:
    By default the program runs as sudo. To run as normal user, pass the -n
    flag. This user must have absolute privileges over all files in the
    WordPress installation directory.

    The location is updated to the latest version of WordPress by default, use
    the -V flag to change the WordPress version.

    If the -f or -i flags are not given on the command line, the program will
    attempt to update the current directory.

    The script attempts to use the wp-config.php file for MySQL database
    account and connection information. If it can not find the information, the
    script prompts for a MySQL user and password.

    The script saves a copy of the downloaded WordPress version in the home
    directory when run without sudo, or in the /tmp directory when run with
    sudo (default), so that subsequent calls to the script use the already
    downloaded version.  
    
    '


###################       FUNCTIONS     ########################################
# Get the MySQL user and password
function ask_db_account() {
    # Get the MySQL user/pass but don't show it on the CLI
    echo -n "Enter a MySQL user with access to the database: "
    read -s sqluser
    echo
    echo -n "Enter the MySQL pass: "
    read -s sqlpass
    echo
}

# Purpose: Get a value from the wp-config.php file.
#
# Parameters:
# $1 = the variable to look for in wp-config.php
# $2 = the path to the wp-config.php file itself
#
# Usage: Call the function and set the result to a variable. Give the function
# the VARIABLE in the wp-config.php file to get. Relies on wp-config.php using
# single quotes. 
# Example: DBUSER=$(get_config_value DBUSER $path)
#
function get_config_value() {
    if [[ -f ${2}/wp-config.php ]]; then
        # help on BASH function return values from here:
        # http://www.linuxjournal.com/content/return-values-bash-functions
        value=''
        if [[ -n "$1" && -n "$2" ]]; then
            value=$(grep "^define('${1}" ${2}/wp-config.php | sed -r -e "s/.*'${1}'.*'([^']+)'.*/\1/")
            echo $value
        fi
    fi
}


#####################    END FUNCTIONS        ##################################




################################################################################
#                                                                              #
#                       Options, Flags, Parameters.                            #
#                                                                              #
#                                                                              #
#                                                                              #
################################################################################

# Set variables of unused options
BRANCH=''
CONFIG=''
DBNAME=''
FILENAME=''
NEWURL=''
NOBACKUP=''
NOSUDO=''
REPORTPATH=''
SINGLE=''
SKIPFIX=''
SKIPSECURE=''
SVNOPT=''
TAGS=''
TEMPSET=''
WPVERSION=''


# Get the options
while getopts "bcd:f:hi:km:no:prs:tuvV:wx" options; do
    case $options in
        b ) BRANCH="branches";;
        c ) CONFIG='true';;
        d ) DBNAME="$OPTARG";;
        f ) FILENAME="$OPTARG";;
        h ) echo "$HELPTEXT"
            exit 0;;
        i ) SINGLE="$OPTARG";;
        k ) NOBACKUP='true';;
        m ) TEMPSET="$OPTARG";;
        n ) NOSUDO='true';;
        o ) REPORTPATH="$OPTARG";;
        p ) SKIPSECURE="true";;
        r ) echo "$SVNBASE"
            exit 0;;
        s ) NEWURL="$OPTARG";;
        t ) TAGS="tags";;
        u ) SVNOPT="update";;
        v ) echo "wpupdate $VERSION"
            exit 0;;
        V ) WPVERSION="$OPTARG";;
        w ) SVNOPT="switch";;
        x ) SKIPFIX='true';;
        \? ) echo "$USAGE"
             exit 1;;
        * ) echo "$USAGE"
            exit 1;;
    esac
done
shift $(($OPTIND - 1))




################################################################################
#                                                                              #
#               Temporary locations and WordPress Version                      #
#                                                                              #
#                                                                              #
#                                                                              #
################################################################################

# If the -m flag is not used, set tmp to /tmp directory, otherwise use -m value
if [[ -z ${TEMPSET} ]]; then
    TMPDIR="/tmp/wp-tmp"
    TMPWPDIR="${TMPDIR}/latest-wp"
else
    TMPDIR="${TEMPSET}/wp-tmp"
    TMPWPDIR="${TMPDIR}/latest-wp"

fi

# If it doesn't exist, make a temporary directory for WP versions and backups.
if [[ ! -d $TMPDIR ]]; then
    if [[ 'true' == $NOSUDO ]]; then
        mkdir -p $TMPDIR
    else
        sudo mkdir -p $TMPDIR
    fi
fi

# Create a temp folder for the selected WP version.
if [[ ! -d $TMPWPDIR ]]; then
    if [[ 'true' == $NOSUDO ]]; then
        mkdir -p $TMPWPDIR
    else
        sudo mkdir -p $TMPWPDIR
    fi
fi



# If the -V flag is not used, use the latest version.
if [[ -z ${WPVERSION-} ]]; then
    wpfile="latest.zip"
    WPVERSION=${LATESTWP}
else
    # Otherwise use the requested version.
    wpfile="wordpress-${WPVERSION}.zip"
fi

# Check if the version has already been downloaded and unzipped in the past, if
# so, we'll use that later on. If not, then download and unzip it.
if [[ ! -d ${TMPWPDIR}/${WPVERSION} ]]; then
    echo "Grabbing version ${WPVERSION} of WordPress"

    if [[ 'true' == $NOSUDO ]]; then
            # Get the requested version
        wget -nv -O ${TMPWPDIR}/${WPVERSION}.zip http://wordpress.org/${wpfile}
            # Unpackage it
        unzip -oq ${TMPWPDIR}/${WPVERSION}.zip -d ${TMPWPDIR}/${WPVERSION}
            # Remove zip file
        rm -f ${TMPWPDIR}/${WPVERSION}.zip
    else
            # Get the requested version
        sudo wget -nv -O ${TMPWPDIR}/${WPVERSION}.zip http://wordpress.org/${wpfile}
            # Unpackage it
        sudo unzip -oq ${TMPWPDIR}/${WPVERSION}.zip -d ${TMPWPDIR}/${WPVERSION}
            # Remove zip file
        sudo rm -f ${TMPWPDIR}/${WPVERSION}.zip
    fi

fi


################################################################################
#                                                                              #
#          Create the array containing the list of locations to upgrade        #
#                                                                              #
#                                                                              #
#                                                                              #
################################################################################

# If the -f flag (file containing paths) is used and the -i flag (single path
# given on cmdline) is NOT used...
if [[ -n $FILENAME && -z $SINGLE ]]; then
    # if there is actually a file, use it, if not exit
    if [ -f $FILENAME ]; then
        cnt=''
        # Read each line of the file into the filelist variable
        while IFS= read -r filelist 
        do
            # Check each line of the file as it is read
            case $filelist in
                # if the line begins with a semi-colon, do nothing
                *";"*)
                ;;
                # if the line does not begin with a semi-colon, then 
                *)
                    # increase the internal counter
                    cnt=$[cnt+1]
                    # add the line to the filearray array (with the increased
                    # array index)
                    filearray[$cnt]=${filelist}
                ;;
                esac
        # Read in the lines from the FIELNAME file
        done < $FILENAME
    else
        echo "ERROR: [-f] Must be a file."
        echo "$HELPTEXT"
        exit 1
    fi

# If the -f flag (file containing paths) is NOT used and the -i flag (single
# path given on cmdline) is used...
elif [[ -z $FILENAME && -n $SINGLE ]]; then
    # check that the path exists, if not exit
    if [ -d $SINGLE ]; then
        # If the path exists, set the path as the only element in the filearray
        # array
        filearray[0]="$SINGLE"
    else
        echo "ERROR: [-i] Must be a directory."
        echo "$HELPTEXT"
        exit 1
    fi

# If the f and i flags are both set, show help and quit. Can't have both
elif [[ -n $FILENAME && -n $SINGLE ]]; then
    echo "$HELPTEXT"
    exit 1

# If no f or i flag, then assume updating only the current directory.
else
    # Previous behavior was to prompt for file containing list or update 
    # the current directory.
    # If no path (-i flag) or file containing paths (-f flag) is given, then
    # set the current directory path as the only element in the fiel array
    filearray[0]=$(pwd)
fi



################################################################################
#                                                                              #
#        Things to do before running backup and upgrade on each path.          #
#                                                                              #
#                                                                              #
#                                                                              #
################################################################################

# Check if the filearray, list of paths, is empty, if so exit.
if [[ ${#filearray[@]} -eq 0 ]]; then
    echo "No WordPress locations specified. If using -f flag, make sure at least one path is uncommented. If using -i flag, make sure a full path to a location is given."
    exit 1
fi

# Ask for MySQL account info if -c flag is used.
if [[ "true" == "${CONFIG-}" ]]; then
    ask_db_account
fi


################################################################################
#                                                                              #
#          Begin big FOR Loop to update each WordPress Installation            #
#                                                                              #
#                                                                              #
#                                                                              #
################################################################################


# Loop through all of the paths from the file, or the current dir
for path in ${filearray[@]}
do


    ################################################################
    #                                                              #
    #          Checks for this path before upgrading               #
    #                                                              #
    ################################################################
    # Check to make sure the path is actually a directory, if not continue with
    # the next path
    if [[ ! -d $path ]]; then
        echo -e "$red $path does not exist. $reset"
        continue
    fi

    # If the b,s,t,u,w flags are used, check to see if it is an SVN install If it
    # is an SVN install proceed, if not, then skip this location. The old
    # default update used to require updating via SVN, new default uses the
    # 'latest.zip' file from http://wordpress.org and 'cp' command.
    if [[ -n "${BRANCH-}" || -n "${NEWURL-}" || -n "${TAGS-}" || -n "${SVNOPT-}" ]]; then

        # check for the .svn directory, if not there, then skip this location
        if [[ ! -d .svn ]]; then
            echo -e "$red $path is not an svn install of WordPress. $reset"
            echo -e "Options b,s,t,u,w require the install location to be an existing SVN installation."
            continue
        fi
    fi


    cd $path

    echo
    echo "-------------------------------------------------------"
    echo -e "Updating $green $path $reset"
    echo

    ################################################################
    #                                                              #
    #                       SETUP VARIABLES                        #
    #                                                              #
    ################################################################
#:<<'COMMENT5'

    ###################     File/Path Info    ##################
    # Get rid of trailing slash if there.
    path=${path%/}

    # Replace all slashes with dashes for use in name of backup files
    sitename=`pwd | sed -r -e "s/\//-/g"`

    # Get the folder owner and group
    ownr=`ls -lad ${path} | cut -f3 -d" "`
    grp=`ls -lad ${path} | cut -f4 -d" "`


    ###################      MySQL info      ###################

    # Get information from the wp-config.php file in order to make
    #   a backup copy 

    # if the -c flag is not used, then get the sql user/pass from the
    # wp-config.php file, otherwise user was prompted for them already.
    if [[ -z "${CONFIG-}" ]]; then
        sqluser=$(get_config_value DB_USER $path)
        sqlpass=$(get_config_value DB_PASSWORD $path)
    fi

        # Get the database name
    if [[ -z "${DBNAME-}" ]]; then
        db_name=$(get_config_value DB_NAME $path)
    else
        # If the 'd' flag was used, use that value as the database name
        db_name=$DBNAME
    fi

    
        # Get the table prefix
    tb_prefix=$(grep "table_prefix" ${path}/wp-config.php | sed -r -e "s/.*'([^']+)'.*/\1/")
        # Get a list of the tables
    table_list=$(mysql -u${sqluser} --password="${sqlpass}" $db_name --raw --silent --silent --execute="SHOW TABLES;")


#COMMENT5

    ################################################################
    #                                                              #
    #                       MAKE BACKUPS                           #
    #                                                              #
    ################################################################
#:<<'COMMENT4'
    if [[ 'true' == $NOBACKUP ]]; then
        echo "Skipping backup"

    else

        # Create a temporary backup folder for this install
        tmpsite="${TMPDIR}/backup${sitename}"
        if [[ ! -d $tmpsite ]]; then
            if [[ 'true' == $NOSUDO ]]; then
                mkdir -p $tmpsite
            else
                sudo mkdir -p $tmpsite
            fi
        fi
        echo "Creating location for temporary backup at: "
        echo "  $tmpsite"

        #     Make a backup of the wp-content folder and the MySQL DB  
        echo "Creating backup of MySQL database..."
        # Clear the tables value
        tables="" 
        for tablename in ${table_list[@]}
        do
            # If the table has the correct prefix, add it to the tables array
            if [[ "$tablename" =~ $tb_prefix ]]; then
                tables+="$tablename "
            fi
        done
        # Use mysqldump to make an sql file of the correct tables. Dumps go in temporary folder
        sqlfile="${tmpsite}/${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql"
        if [[ 'true' == $NOSUDO ]]; then
            mysqldump -u${sqluser} --password='${sqlpass}' --single-transaction --opt $db_name $tables > $sqlfile
            zip -q ${sqlfile}.zip $sqlfile
            rm -f ${sqlfile}
        else
            # Run this command through bash -c so that sudo applies to writing the redirection to file
            sudo bash -c "mysqldump -u${sqluser} --password='${sqlpass}' --single-transaction --opt $db_name $tables > $sqlfile"
            sudo zip -q ${sqlfile}.zip $sqlfile
            sudo rm -f ${sqlfile}
        fi


        echo "Creating backup of 'wp-content'..."
        # Make the backup copy of the wp-content folder
        #   zip -q flag: quietly, don't output info
        #   zip -u flag: Replace (update) an existing entry in the zip
        #   archive only if it has been modified more recently than the
        #   version already in the zip archive.
        #   zip -r flag: recursively
        #   zip -x flag: exclude directories, specifically cache directories.
        #   Also deletes wp-super-cache plugin...
        CONTENTBK="wp-content-backup.zip"
        if [[ 'true' == $NOSUDO ]]; then
            zip -qur ${tmpsite}/${CONTENTBK} ${path}/wp-content -x *cache*
        else
            sudo zip -qur ${tmpsite}/${CONTENTBK} ${path}/wp-content -x *cache*
        fi

    fi # end of backing up 
#COMMENT4



    # Check if any SVN flags were used
    if [[ -n "${BRANCH-}" || -n "${NEWURL-}" || -n "${TAGS-}" || -n "${SVNOPT-}" ]]; then


    ################################################################
    #                                                              #
    #                     UPDATE WITH SVN                          # 
    #                                                              #
    ################################################################

    echo "Updating with SVN"

    ###############     REPOSITORY CHECK       #######################
#:<<'COMMENT3'
        # Check if it's the right repository, if not prompt to use
        #   current or to switch to the default
            # Get the current repository used
        currentrepo=`svn info | grep "Repository Root" | cut -d' ' -f3`

            # Check it against the default repo
        if [ $currentrepo != $SVNBASE ]; then
            # Prompt of which repo to use
            echo
            echo -e "Current repository is '$currentrepo' while the default repository is '$SVNBASE'. \n\n\tWhich repo would you like to use? \n\t[1] = $currentrepo \n\t[2] = $SVNBASE (default)"
            echo -n "(Type a number or <ENTER> to use the default.) : "
            read repochoice

            # Set the 'userepo' variable to the chosen value
            if [[ '1' == $repochoice ]]; then
                userepo=$currentrepo
            else
                userepo=$SVNBASE
                echo "Relocating svn installation to $userepo..."
                if [[ 'true' == $NOSUDO ]]; then
                    svn switch --relocate $currentrepo $userepo
                else
                    sudo svn switch --relocate $currentrepo $userepo
                fi
            fi
        # Set to the default
        else
            userepo=$SVNBASE
        fi
#COMMENT3


    #################         RUN SVN        #########################
#:<<'COMMENT2'
        # Set whether it's an update or a switch. Use update by default
        #   (if option was not given).
        if [ -z $SVNOPT ]; then
            switch="update"
        else
            switch="$SVNOPT"
        fi

        # Set it to a branch or tag. Default is to use branches
            # If branches is selected and tags is not, then set to branches
        if [[ -n $BRANCH && -z $TAGS ]]; then
            kind="$BRANCH"

            # If branches is not selected and tags is, then set to tags
        elif [[ -z $BRANCH && -n $TAGS ]]; then
            kind="$TAGS"

            # If both branches and tags are selected, then prompt user
            #   for which they wanted to use.
        elif [[ -n $BRANCH && -n $TAGS ]]; then
            echo "You can only use 'branches' or 'tags', not both. Type 'b' for branches, 't' for tags: "
            read what_kind
            if [ $what_kind == "t" ]; then
                kind="tags"
            else
                kind="branches"
            fi
        else
            kind="branches"
        fi

        # Set the SVN URL to the user supplied or default svn URL and
        #   add the branch or tag
        if [ -z $NEWURL ]; then
            SVNURL="$userepo/$kind"
        else
            # Get rid of trailing slash if there.
            NEWURL=${NEWURL%/}
            SVNURL="$NEWURL/$kind"
        fi

        # If the option to create the svn reports is not set, then use
        #   the user's home directory.
        if [ -z $REPORTPATH ]; then
            REPORTPATH=$HOME
        fi
        if [ ! -d $REPORTPATH/wpupdate-reports ]; then
            # Make a folder to hold the reports.
            mkdir $REPORTPATH/wpupdate-reports
        fi

        echo
        echo -e "${yellow}Running svn ${reset}on $path ..."

        # Set the variable for the path and name of the report file
        SVNREPORTFILE="$REPORTPATH/wpupdate-reports/${SVNREPORT}${sitename}"
        echo -e "Saving output to $white $SVNREPORTFILE $reset..."

        # Open a file descriptor to put all svn output to a file.
        exec 7>&1
        exec > $SVNREPORTFILE
        if [[ 'true' == $NOSUDO ]]; then
            svn $switch $SVNURL/$1/ $path/
        else
            sudo svn $switch $SVNURL/$1/ $path/
        fi
        exec 1>&7 7>&-

        # spit out any svn conflicts
        if [[ `grep "C " $SVNREPORTFILE` ]]; then
            svnconflicts=`grep "C " $SVNREPORTFILE` 
            echo -e "SVN had the following errors: \n $red $svnconflicts $reset"
        fi
#COMMENT2


    
    # if SVN flags were not used, then update using the copy command and the
    # latest version downloaded from wordpress.org and stored in the temp
    # folder 
    else 

    ################################################################
    #                                                              #
    #               UPDATE WITH COPY COMMAND                       #
    #                                                              #
    ################################################################
###:<<COMMENT02

        echo    
        echo -e "${cyan}Updating WordPress core files.${reset}"
        echo

        if [[ 'true' == $NOSUDO ]]; then
            cp -rf $TMPWPDIR/${WPVERSION}/wordpress/* $path/ 
        else
            sudo cp -rf $TMPWPDIR/${WPVERSION}/wordpress/* $path/ 
        fi


#COMMENT02
    fi  # end check if SVN flags used



    ################################################################
    #                                                              #
    #                    Secure WP install                         #
    #                                                              #
    ################################################################
###:<<COMMENT01
    if [[ 'true' == $SKIPSECURE ]]; then
        echo "Skip security fixes..."
    else
        # Remove the install.php file
        if [ -f $path/wp-admin/install.php ]; then
            echo "Removing install.php file"
            if [[ 'true' == $NOSUDO ]]; then
                rm -f $path/wp-admin/install.php
            else
                sudo rm -f $path/wp-admin/install.php
            fi
        fi

        uploads="${path}/wp-content/uploads/"
        if [ -d $uploads ]; then
            echo "Fixing permissions for 'uploads' directory and checking .htaccess file"
            ########################################################################
            #####  Fix the permissions

            # Test for setfacl program, then remove all ACL's. We shouldn't need them.
            is_setfacl=`which setfacl`
            if [[ 'true' == $NOSUDO ]]; then
                if [[ -n "$is_setfacl" ]]; then
                    find $uploads -type d -exec setfacl -b '{}' \;
                    find $uploads -type f -exec setfacl -b '{}' \;
                fi
            else
                if [[ -n "$is_setfacl" ]]; then
                    sudo find $uploads -type d -exec setfacl -b '{}' \;
                    sudo find $uploads -type f -exec setfacl -b '{}' \;
                fi
            fi


            ########################################################################
            #####  HTACCESS STUFF

            # There should be a .htaccess file in the wp-content/uploads/ folder to
            # limit the types of files that can be uploaded and downloaded. Check
            # for the .htaccess file, create it if need be, and fix the
            # permissions.

            htfile="${uploads}.htaccess"
            htcontent='
## Only allow the following file formats to be accessed
Order Allow,Deny
Deny from all
<Files ~ "\.(jpeg|jpg|png|gif|gz|pdf)$">
Allow from all
</Files>

RewriteCond %{HTTP:Content-Disposition} \.php [NC]
RewriteCond %{HTTP:Content-Type} image/.+ [NC]
RewriteRule .* - [F,NS,L]
'

            # If there is an .htaccess file already
            if [[ -a "$htfile" ]]; then
                allowed=`cat $htfile | grep "jpeg\|jpg\|png\|gif"`
                # And if there is NOT a line with "jpeg|jpg|png|gif" in it
                # already
                if [[ -z "$allowed" ]]; then
                    # Then show the current contents and ask if it should
                    # be modified
                    echo 
                    echo -e "$green $htfile $reset"
                    cat $htfile
                    echo 
                    echo "Change file?"
                    echo -e "${red}[ Enter ]:  no changes to file${reset}"
                    echo -e "      ${yellow}[ a ]:  append to end of file${reset}"
                    echo -e "      ${blue}[ w ]:  write over file${reset}"
                    read changefile
                    if [[ 'true' == $NOSUDO ]]; then
                        if [[ "w" == "$changefile" ]]; then
                            echo "$htcontent" > $htfile
                        elif [[ "a" == "$changefile" ]]; then
                            echo "$htcontent" >> $htfile
                        fi
                    else
                        if [[ "w" == "$changefile" ]]; then
                            sudo bash -c "echo '$htcontent' > $htfile"
                        elif [[ "a" == "$changefile" ]]; then
                            sudo bash -c "echo '$htcontent' >> $htfile"
                        fi
                    fi
                else
                    echo -e "      ${green}.htaccess file looks fine.${reset}"
                fi

            else
                echo
                echo -e "$reset Created .htaccess file"
                if [[ 'true' == $NOSUDO ]]; then
                    echo "$htcontent" > $htfile
                else
                    sudo bash -c "echo '$htcontent' > $htfile"
                fi
            fi


        fi # end if uploads dir exists


        # Check if .htaccess file is protecting wp-config.php and .svn
        # directories


    fi # end if skip secure

#COMMENT01


    ################################################################
    #                                                              #
    #                      FIX PERMISSIONS                         #
    #                                                              #
    ################################################################
#:<<'COMMENT1'
    # Fix the permissions and set the owner for all WP files. Don't
    #   mess with the group in case it is something special (as in
    #   a different group for some wp-content folders to allow
    #   apache to write to them).
    if [[ 'true' == $SKIPFIX ]]; then
        echo "Skipping permissions fixing..."
    else
        echo "Fixing permissions on $path..."
        if [[ 'true' == $NOSUDO ]]; then
            find $path -type d -exec chmod ug=rwx,g+s,o=rx '{}' \;
            find $path -type f -exec chmod 664 '{}' \;
            chown -R $ownr ${path}
        else
            sudo find $path -type d -exec chmod ug=rwx,g+s,o=rx '{}' \;
            sudo find $path -type f -exec chmod 664 '{}' \;
            sudo chown -R $ownr ${path}
        fi
    fi

#COMMENT1


    ################################################################
    #                                                              #
    #                   UPGRADE MYSQL DATABASE                     #
    #                                                              #
    ################################################################
###:<<COMMENT0
    # Run the web based upgrade script using curl
    echo
        # get the url of the site, unset variable first.
    url=''
    url=( $(mysql -u${sqluser} --password="${sqlpass}" $db_name --raw --silent --silent --execute="SELECT option_value FROM ${tb_prefix}options WHERE option_name='siteurl' LIMIT 1") )
        # Set the home to be the same as the url, in case it isn't in the database.
    homeurl=( $(mysql -u${sqluser} --password="${sqlpass}" $db_name --raw --silent --silent --execute="SELECT option_value FROM ${tb_prefix}options WHERE option_name='home' LIMIT 1") )
    if [[ -z "${homeurl-}" ]]; then
        homeurl=$url
    fi

    # Test if the url variable has a value
        # Grab the first four characters, and if they are 'http'
        #   then there is a value there.
    urlCheck=( ${url:0:4} )
    if [[ 'http' == $urlCheck ]]; then
        echo -e "Running DB update on $blue $homeurl $reset"
        curl -o /dev/null "$url/wp-admin/upgrade.php?step=1&backto=%2Fwp-admin%2F"
    else
        echo -e "Remember to run the upgrade script for $red $homeurl $reset!!"
    fi
    echo "_______________________________________________________"
    echo 
    echo 

#COMMENT0

done


exit 0
